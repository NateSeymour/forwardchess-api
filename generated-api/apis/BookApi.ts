/* tslint:disable */
/* eslint-disable */
/**
 * ForwardChess API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface GetBookFileRequest {
    bookId: string;
    file: string;
    t: string;
    d: string;
}

export interface GetBookFileListRequest {
    bookId: string;
    sample?: boolean;
}

/**
 * 
 */
export class BookApi extends runtime.BaseAPI {

    /**
     */
    async getBookFileRaw(requestParameters: GetBookFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.bookId === null || requestParameters.bookId === undefined) {
            throw new runtime.RequiredError('bookId','Required parameter requestParameters.bookId was null or undefined when calling getBookFile.');
        }

        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling getBookFile.');
        }

        if (requestParameters.t === null || requestParameters.t === undefined) {
            throw new runtime.RequiredError('t','Required parameter requestParameters.t was null or undefined when calling getBookFile.');
        }

        if (requestParameters.d === null || requestParameters.d === undefined) {
            throw new runtime.RequiredError('d','Required parameter requestParameters.d was null or undefined when calling getBookFile.');
        }

        const queryParameters: any = {};

        if (requestParameters.t !== undefined) {
            queryParameters['t'] = requestParameters.t;
        }

        if (requestParameters.d !== undefined) {
            queryParameters['d'] = requestParameters.d;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gcs/forwardchess-books/{bookId}/{file}`.replace(`{${"bookId"}}`, encodeURIComponent(String(requestParameters.bookId))).replace(`{${"file"}}`, encodeURIComponent(String(requestParameters.file))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async getBookFile(requestParameters: GetBookFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getBookFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getBookFileListRaw(requestParameters: GetBookFileListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.bookId === null || requestParameters.bookId === undefined) {
            throw new runtime.RequiredError('bookId','Required parameter requestParameters.bookId was null or undefined when calling getBookFileList.');
        }

        const queryParameters: any = {};

        if (requestParameters.sample !== undefined) {
            queryParameters['sample'] = requestParameters.sample;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/books/{bookId}/list`.replace(`{${"bookId"}}`, encodeURIComponent(String(requestParameters.bookId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async getBookFileList(requestParameters: GetBookFileListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getBookFileListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
